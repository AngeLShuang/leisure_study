"""
编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为 汉明重量).）。

示例 1：
输入：n = 11 (控制台输入 00000000000000000000000000001011)
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。

示例 2：
输入：n = 128 (控制台输入 00000000000000000000000010000000)
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。

示例 3：
输入：n = 4294967293 (控制台输入 11111111111111111111111111111101，部分语言中 n = -3）
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。

位运算

根据 与运算 定义，设二进制数字 nn ，则有：
    1.若 n&1=0 ，则 n 二进制 最右一位 为 0 ；
    2.若 n&1=1 ，则 n 二进制 最右一位 为 1 。
根据以上特点，考虑以下 循环判断 ：
    1.判断 n 最右一位是否为 1 ，根据结果计数。
    2.将 n 右移一位（本题要求把数字 n 看作无符号数，因此使用 无符号右移 操作）。

算法流程：
    1.初始化数量统计变量 res=0 。
    2.循环逐位判断： 当 n=0 时跳出。
        1.res += n & 1 ： 若 n&1=1 ，则统计数 res 加一。
        2.n >>= 1 ： 将二进制数字 n 无符号右移一位 。
    3.返回统计数量 res 。

"""


class Solution(object):
    def hammingWeight(self, n):
        """
        :type n: int
        :rtype: int
        """
        res = 0
        while n:
            res += n & 1
            n >>= 1
        return res
